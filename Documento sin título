@Injectable()
export class AutenticacionService {

    static user: User;

    constructor (private http: Http, private router:Router){
      if (AutenticacionService.user == undefined){
        console.log("Conectado, pero sin usuario estatico");
        this.logOut();
      }
    }

  	public logIn(user: string, pass: string) {

      console.log("LOGIN");

  		let userPass = user + ":" + pass;

  		let headers = new Headers({
  			'Authorization': 'Basic '+utf8_to_b64(userPass),
  			'X-Requested-With': 'XMLHttpRequest'
  		});

  		let options = new RequestOptions({headers});

  		return this.http.get('logIn', options).map(
  			response => {
				  return this.processLogInResponse(response);;
  			}
  		);

  	}

    private processLogInResponse(response){
      console.log("EN BRUTO")
      console.log(response);
      console.log("EN JSON")
      console.log(response.json());

  		AutenticacionService.user = response.json();
      return response;
  	}

    public logOut(){
        console.log("LOGOUT LLAMADO");

        this.http.get('logOut').map(
    			response => {
            return response;
  			  }
		    ).subscribe(
          response => {
            console.log("LOGOUT LLEGO");
            console.log(response);
            AutenticacionService.user = undefined;
            localStorage.clear();
            this.router.navigateByUrl("/");
          }
        );
    }

    // API DE AUTENTICACIÃ“N

    public isLogIn():boolean{
        return AutenticacionService.user != undefined;
    }

    public esAlumno():boolean {
        return this.checkLS("ROLE_STUDENT");
    }

    public esProfesor():boolean {
        return this.checkLS("ROLE_TRAINER");
    }

    public isAdmin():boolean {
        return this.checkLS("ROLE_ADMIN");
    }


    private checkLS(rol:string):boolean{
        return this.isLogIn() && AutenticacionService.user.roles.indexOf(rol) !== -1;
    }


};
